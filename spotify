#!/usr/bin/env bash

# Copyright (c) 2012--2015 Harish Narayanan <mail@harishnarayanan.org>
#
# Contains numerous helpful contributions from Jorge Colindres, Thomas
# Pritchard, iLan Epstein, Gabriele Bonetti and Sean Heller.

# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

showHelp () {
    echo "Usage:";
    echo;
    echo "  `basename $0` <command>";
    echo;
    echo "Commands:";
    echo;
    echo "  play                         # Resume playback where Spotify last left off.";
    echo "  play [song name]             # Finds a song by name and plays it.";
    echo "  play album [album name]      # Finds an album by name and plays it.";
    echo "  play artist [artist name]    # Finds an artist by name and plays it.";
    echo "  play list [playlist name]    # Finds a playlist by name and plays it.";
    echo;
    echo "  next                         # Skips to the next song in a playlist.";
    echo "  prev                         # Returns to the previous song in a playlist.";
    echo "  pos [time]                   # Jump to a specific time (in seconds) in the current song.";
    echo "  pause                        # Pauses Spotify playback.";
    echo "  quit                         # Stops playback and quits Spotify.";
    echo;
    echo "  vol up                       # Increases the volume by 10%.";
    echo "  vol down                     # Decreases the volume by 10%.";
    echo "  vol [amount]                 # Sets the volume to an amount between 0 and 100.";
    echo;
    echo "  status                       # Shows the play status, including the current song details.";
    echo "  share                        # Shows and copies the current song URL to the clipboard for sharing."
    echo;
    echo "  toggle shuffle               # Toggle shuffle playback mode.";
    echo "  toggle repeat                # Toggle repeat playback mode.";
}

cecho(){
    bold=$(tput bold);
    green=$(tput setaf 2);
    reset=$(tput sgr0);
    echo $bold$green"$1"$reset;
}

if [ $# = 0 ]; then
    showHelp;
else
    if [ $(osascript -e 'application "Spotify" is running') = "false" ]; then
        osascript -e 'tell application "Spotify" to activate'
        sleep 2
    fi
fi
while [ $# -gt 0 ]; do
    arg=$1;

    case $arg in
        "play"    )
            if [ $# != 1 ]; then
                # There are additional arguments, so find out how many
                array=( $@ );
                len=${#array[@]};
                SPOTIFY_SEARCH_API="https://api.spotify.com/v1/search"
                SPOTIFY_PLAY_URI="";


                if [ "$2" = "album" ]; then
                    _args=${array[@]:2:$len};
                    Q=$_args;

                    if [[ "$Q" =~ "http" ]]; then
                        cecho "$Q find";
                        re="album/([a-zA-Z0-9]*)"
                        if [[ "$Q" =~ $re ]]; then 
                            SPOTIFY_PLAY_URI=$( \
                                echo "spotify:album:${BASH_REMATCH[1]}" \
                            )
                        fi

                    elif [[ "$Q" =~ "spotify:album" ]]; then
                        SPOTIFY_PLAY_URI=$Q;
                    else
                        cecho "Searching albums for: $Q";

                        SPOTIFY_PLAY_URI=$( \
                            curl -s -G $SPOTIFY_SEARCH_API --data-urlencode "q=$Q" -d "type=album&limit=1&offset=0" -H "Accept: application/json" \
                            | grep -E -o "spotify:album:[a-zA-Z0-9]+" -m 1 \
                        )
                    fi

                elif [ "$2" = "artist" ]; then
                    _args=${array[@]:2:$len};
                    Q=$_args;

                    if [[ "$Q" =~ "http" ]]; then
                        cecho "$Q find";
                        re="artist/([a-zA-Z0-9]*)"
                        if [[ "$Q" =~ $re ]]; then 
                            SPOTIFY_PLAY_URI=$( \
                                echo "spotify:artist:${BASH_REMATCH[1]}" \
                            )
                        fi

                    elif [[ "$Q" =~ "spotify:artist" ]]; then
                        SPOTIFY_PLAY_URI=$Q;
                    else
                        cecho "Searching artists for: $Q";

                        SPOTIFY_PLAY_URI=$( \
                            curl -s -G $SPOTIFY_SEARCH_API --data-urlencode "q=$Q" -d "type=artist&limit=1&offset=0" -H "Accept: application/json" \
                            | grep -E -o "spotify:artist:[a-zA-Z0-9]+" -m 1 \
                        )
                    fi

                elif [ "$2" = "list" ]; then
                    _args=${array[@]:2:$len};
                    Q=$_args;
                    
                    if [[ "$Q" =~ "http" ]]; then
                        cecho "$Q find";
                        re="user/([a-zA-Z0-9]*)/playlist/([a-zA-Z0-9]*)"
                        if [[ "$Q" =~ $re ]]; then 
                            SPOTIFY_PLAY_URI=$( \
                                echo "spotify:user:${BASH_REMATCH[1]}:playlist:${BASH_REMATCH[2]}" \
                            )
                        fi

                    elif [[ "$Q" =~ "spotify:user" ]]; then
                        SPOTIFY_PLAY_URI=$Q;
                    else
                        cecho "Searching playlists for: $Q";

                        results=$( \
                            curl -s -G $SPOTIFY_SEARCH_API --data-urlencode "q=$Q" -d "type=playlist&limit=10&offset=0" -H "Accept: application/json" \
                            | grep -E -o "spotify:user:[a-zA-Z0-9]+:playlist:[a-zA-Z0-9]+" -m 10 \
                        )
                    fi

                    count=$( \
                        echo "$results" | grep -c "spotify:user" \
                    )

                    if [ "$count" -gt 0 ]; then
                        random=$(( $RANDOM % $count));

                        SPOTIFY_PLAY_URI=$( \
                            echo "$results" | awk -v random="$random" '/spotify:user:[a-zA-Z0-9]+:playlist:[a-zA-Z0-9]+/{i++}i==random{print; exit}' \
                        )
                    fi

                else
                    if [ "$2" = "track" ]; then
                        _args=${array[@]:2:$len};
                    else
                        _args=${array[@]:1:$len};
                    fi
                    Q=$_args;

                    cecho "Searching tracks for: $Q";

                    SPOTIFY_PLAY_URI=$( \
                        curl -s -G $SPOTIFY_SEARCH_API --data-urlencode "q=$Q" -d "type=track&limit=1&offset=0" -H "Accept: application/json" \
                        | grep -E -o "spotify:track:[a-zA-Z0-9]+" -m 1 \
                    )
                fi

                if [ "$SPOTIFY_PLAY_URI" != "" ]; then
                    cecho "Playing ($Q Search) -> Spotify URL: $SPOTIFY_PLAY_URI";

                    osascript -e "tell application \"Spotify\" to play track \"$SPOTIFY_PLAY_URI\"";

                else
                    cecho "No results when searching for $Q";
                fi

            else

                # play is the only param
                cecho "Playing Spotify.";
                osascript -e 'tell application "Spotify" to play';
            fi
            break ;;

        "pause"    )
            state=`osascript -e 'tell application "Spotify" to player state as string'`;
            if [ $state = "playing" ]; then
              cecho "Pausing Spotify.";
            else
              cecho "Playing Spotify.";
            fi

            osascript -e 'tell application "Spotify" to playpause';
            break ;;

        "quit"    ) cecho "Quitting Spotify.";
            osascript -e 'tell application "Spotify" to quit';
            exit 1 ;;

        "next"    ) cecho "Going to next track." ;
            osascript -e 'tell application "Spotify" to next track';
            break ;;

        "prev"    ) cecho "Going to previous track.";
            osascript -e 'tell application "Spotify" to previous track';
            break ;;

        "vol"    )
            vol=`osascript -e 'tell application "Spotify" to sound volume as integer'`;
            text=$2;
            if [ "$2" = "up" ]; then
                newvol=$(( vol+10 ));
            elif [ "$2" = "down" ]; then
                newvol=$(( vol-10 ));
            elif [ $2 -gt 0 ]; then
              newvol=$2;
              text="to $2";
            fi

            cecho "Changing Spotify volume level $text.";
            osascript -e "tell application \"Spotify\" to set sound volume to $newvol";
            break ;;

        "toggle"  )
            if [ "$2" = "shuffle" ]; then
                osascript -e 'tell application "Spotify" to set shuffling to not shuffling';
                curr=`osascript -e 'tell application "Spotify" to shuffling'`;
                cecho "Spotify shuffling set to $curr";
            elif [ "$2" = "repeat" ]; then
                osascript -e 'tell application "Spotify" to set repeating to not repeating';
                curr=`osascript -e 'tell application "Spotify" to repeating'`;
                cecho "Spotify repeating set to $curr";
            fi
            break ;;

        "status" )
            state=`osascript -e 'tell application "Spotify" to player state as string'`;
            cecho "Spotify is currently $state.";
            if [ $state = "playing" ]; then
                artist=`osascript -e 'tell application "Spotify" to artist of current track as string'`;
                album=`osascript -e 'tell application "Spotify" to album of current track as string'`;
                track=`osascript -e 'tell application "Spotify" to name of current track as string'`;

                echo -e $reset"Artist: $artist\nAlbum: $album\nTrack: $track";
            fi
            break ;;

        "info" )
            info=`osascript -e 'tell application "Spotify" 
                set tM to round (duration of current track / 60) rounding down
                set tS to duration of current track mod 60
                set pos to player position as text
                set myTime to tM as text & "min " & tS as text & "s"
                set nM to round (player position / 60) rounding down
                set nS to round (player position mod 60) rounding down
                set nowAt to nM as text & "min " & nS as text & "s"
                set info to "" & "\nArtist:         " & artist of current track
                set info to info & "\nTrack:          " & name of current track
                set info to info & "\nAlbum Artist:   " & album artist of current track
                set info to info & "\nAlbum:          " & album of current track
                set info to info & "\nSeconds:        " & duration of current track
                set info to info & "\nSeconds played: " & pos
                set info to info & "\nDuration:       " & mytime 
                set info to info & "\nNow at:         " & nowAt
                set info to info & "\nPlayed Count:   " & played count of current track
                set info to info & "\nTrack Number:   " & track number of current track
                set info to info & "\nPopularity:     " & popularity of current track
                set info to info & "\nId:             " & id of current track
                set info to info & "\nSpotify URL:    " & spotify url of current track
                set info to info & "\nArtwork:        " & artwork of current track
                set info to info & "\nPlayer:         " & player state
                set info to info & "\nVolume:         " & sound volume
                set info to info & "\nShuffle:        " & shuffling
                set info to info & "\nRepeating:      " & repeating
            end tell
            return info'`
            cecho "$info";
            break ;;

        "share"     )
            url=`osascript -e 'tell application "Spotify" to spotify url of current track'`;
            remove='spotify:track:'
            url=${url#$remove}
            url="http://open.spotify.com/track/$url"
            cecho "Share URL: $url";
            echo -n "$url" | pbcopy
            break;;

        "pos"   )
            cecho "Adjusting Spotify play position."
            osascript -e "tell application \"Spotify\" to set player position to $2";
            break;;

        "help" | * )
            showHelp;
            break ;;
    esac
done
