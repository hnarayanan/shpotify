#!/usr/bin/env bash
#set -x

# Copyright (c) 2012--2020 Harish Narayanan <mail@harishnarayanan.org>
#
# Contains numerous helpful contributions from Jorge Colindres, Thomas
# Pritchard, iLan Epstein, Gabriele Bonetti, Sean Heller, Eric Martin
# and Peter Fonseca.

# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

SHPOTIFY_VERSION="3.0-pre"
USER_CONFIG_DEFAULTS="CLIENT_ID=\"\"\nCLIENT_SECRET=\"\"";
USER_CONFIG_FILE="${HOME}/.shpotify.cfg";
if ! [[ -f "${USER_CONFIG_FILE}" ]]; then
    touch "${USER_CONFIG_FILE}";
    echo -e "${USER_CONFIG_DEFAULTS}" > "${USER_CONFIG_FILE}";
fi
source "${USER_CONFIG_FILE}";

SHPOTIFY_CREDENTIALS=$(printf "${CLIENT_ID}:${CLIENT_SECRET}" | base64 | tr -d "\n"|tr -d '\r');


# Set the percent change in volume for vol up and vol down
VOL_INCREMENT=10

showAPIHelp() {
    echo;
    echo "Connecting to Spotify's API:";
    echo;
    echo "  This command line application needs to connect to Spotify's API in order to";
    echo "  find music by name. It is very likely you want this feature!";
    echo;
    echo "  To get this to work, you need to sign up (or in) and create an 'Application' at:";
    echo "  https://developer.spotify.com/my-applications/#!/applications/create";
    echo;
    echo "  Once you've created an application, find the 'Client ID' and 'Client Secret'";
    echo "  values, and enter them into your shpotify config file at '${USER_CONFIG_FILE}'";
    echo;
    echo "  Be sure to quote your values and don't add any extra spaces!";
    echo "  When done, it should look like this (but with your own values):";
    echo '  CLIENT_ID="abc01de2fghijk345lmnop"';
    echo '  CLIENT_SECRET="qr6stu789vwxyz"';
}

showAUTHelp() {
    echo;
    echo "Authenticating to Spotify:";
    echo;
    echo " Some commands (marked with *) require shpotify to be authenticated via the browser";
    echo " To make this work, http://localhost:8082/ needs to be added as a redirect_uri in"
    echo " the 'Application' settings you just created at the developer site. "
    echo;
    echo " If 'user authentication' is required, a spotify website will open in your default"
    echo " browser asking for permission. After granting permission, a white page on "
    echo " 'http://localhost:8082/' site will be opened with a token in the url. This token"
    echo " is caught by Shpotify and saved in /var/tmp/shpotify_refresh_token. It's now possible"
    echo " to get information linked to your account, like your playlists, history, devices, etc."
    echo " Please note thise page is supposed to automatically close, but that doesn't always "
    echo " work properly."
    echo;
    echo " In case of authentication issues it might help to remove /var/tmp/shpotify_refresh_token"
    echo " to force re-authentication."
}

showHelp () {
    echo "Usage:";
    echo;
    echo "  `basename $0` <command>";
    echo;
    echo "Commands:";
    echo;
    echo "  play                         # Resumes playback where Spotify last left off.";
    echo "  play <song name>             # Finds a song by name and plays it.";
    echo "  play album <album name>      # Finds an album by name and plays it.";
    echo "  play artist <artist name>    # Finds an artist by name and plays it.";
    echo "  play list <playlist name>    # Finds a playlist by name and plays it.";
    echo "  play uri <uri>               # Play songs from specific uri.";
    echo;
    echo "  next                         # Skips to the next song in a playlist.";
    echo "  prev                         # Returns to the previous song in a playlist.";
    echo "  replay                       # Replays the current track from the beginning.";
    echo "  pos <time>                   # Jumps to a time (in secs) in the current song.";
    echo "  pause                        # Pauses (or resumes) Spotify playback.";
    echo "  stop                         # Stops playback.";
    echo "  quit                         # Stops playback and quits Spotify.";
    echo;
    echo "  vol up                       # Increases the volume by 10%.";
    echo "  vol down                     # Decreases the volume by 10%.";
    echo "  vol <amount>                 # Sets the volume to an amount between 0 and 100.";
    echo "  vol [show]                   # Shows the current Spotify volume.";
    echo;
    echo "  status                       # Shows the current player status.";
    echo "  status artist                # Shows the currently playing artist.";
    echo "  status album                 # Shows the currently playing album.";
    echo "  status track                 # Shows the currently playing track.";
    echo "  status liked <uri>*          # Shows if a track or album is liked or not.";
    echo;
    echo "  share                        # Displays the current song's Spotify URL and URI."
    echo "  share url                    # Displays the current song's Spotify URL and copies it to the clipboard."
    echo "  share uri                    # Displays the current song's Spotify URI and copies it to the clipboard."
    echo;
    echo "  toggle shuffle               # Toggles shuffle playback mode.";
    echo "  toggle repeat                # Toggles repeat playback mode.";
    if [ $jq_installed = "true" ];then
    echo;
    echo "  list uri <format> <uri>      # List information about track, album or playlist by uri. Format in csv|tsv|text|html";
    echo "  list myalbums <format>*      # List 50 of your last liked albums, format in csv|tsv|text|html";
    echo "  list mysongs <format>*       # List 50 of your last liked songs, format in csv|tsv|text|html";
    echo "  list mine <format>*          # List 'my' playlists (uri, title, public), format in csv|tsv|texst|html";
    echo "  list history <format>*       # List 30 last played tracks (uri, title, artist, album), format in csv|tsv|text|html";
    echo "  list devices <format>*       # List devices to play Spotify on. Devices must be active to be seen.";
    echo;
    echo "  like <uri>*                  # Like a song or album and add it to your library.";
    echo;
    echo "  connect <device_id>          # Connect and play music on another device. ID can be found with 'list devices'.";
    fi
    echo "  queue <uri>                  # Queue one or more songs by uri, space separated."
    echo;
    echo "  -v | --version               # Shows the shpotify and spotify versions.";
    echo "* Please note that this requires authentication via a browser.";
    showAPIHelp
    showAUTHelp
}

showVersion() {
    cecho "shpotify.sh: $SHPOTIFY_VERSION";
    cecho "spotify: `osascript -e 'get version of application "Spotify"'`"
}

cecho(){
    bold=$(tput bold);
    green=$(tput setaf 2);
    reset=$(tput sgr0);
    echo $bold$green"$1"$reset;
}

showArtist() {
    echo `osascript -e 'tell application "Spotify" to artist of current track as string'`;
}

showAlbum() {
    echo `osascript -e 'tell application "Spotify" to album of current track as string'`;
}

showTrack() {
    echo `osascript -e 'tell application "Spotify" to name of current track as string'`;
}

showMyDevices() {
  MyDevices=$( \
    curl -s -G  "https://api.spotify.com/v1/me/player/devices" \
      -H "Accept: application/json" \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer ${SPOTIFY_USER_ACCESS_TOKEN}" \
      |  $JQ -r --arg format "$format" '.devices[] | [ .id, .name, .type, .is_active, .volume_percent ] | @'$format'' \
  )
  cecho "$MyDevices"
}

## Consolidate 'show mine':
### Devices -

getMine() {
  MyOutput=$( \
    curl -s -G  "https://api.spotify.com/v1/me/${myfilter}?limit=${1}&offset=${2}" \
      -H "Accept: application/json" \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer ${SPOTIFY_USER_ACCESS_TOKEN}" \
  )
}

showMine() {
  getUserAccessToken
  if [[ ${myfilter} == "tracks" ]] || [[ ${myfilter} == "playlists" ]] || [[ ${myfilter} == "albums" ]] ;then
    getMine 50 0

    total_items=$(echo "$MyOutput" | $JQ -r '.total')
    if [[ $total_items -gt '50' ]];then
      for (( OFFSET=50; OFFSET<=${total_items}; OFFSET+=50 ));do
        MyOutputOrg=$(echo "$MyOutput")
        getMine 50 ${OFFSET}
        MyOutput=$(echo "$MyOutputOrg";echo "$MyOutput")
      done
    fi
  else

    MyOutput=$( \
      curl -s -G  "https://api.spotify.com/v1/me/${myfilter}?limit=50" \
        -H "Accept: application/json" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${SPOTIFY_USER_ACCESS_TOKEN}" \
    )
  fi

    if [[ $myfilter == "tracks" ]];then
      MyOutput=$(echo "$MyOutput" | $JQ -r --arg format "$format" '.items[] | [ .track.uri, .track.name, .track.artists[0].name, .track.album.name] | @'$format'' )
    elif [[ $myfilter == "playlists" ]];then
      MyOutput=$(echo "$MyOutput" | $JQ -r --arg format "$format" '.items[] | [ .uri, .name, .public] | @'$format'' )
    elif [[ $myfilter == "player/recently-played" ]];then
      MyOutput=$(echo "$MyOutput" | $JQ -r --arg format "$format" '.items[] | [ .track.uri, .track.name, .track.artists[0].name, .track.album.name] | @'$format'' )
    else
      MyOutput=$(echo "$MyOutput" | $JQ -r --arg format "$format" '.items[] | [ .album.uri, .album.artists[0].name, .album.name, .album.label, .album.release_date, .album.total_tracks, .album.popularity] | @'$format'' )
    fi
    cecho "$MyOutput"
}

checkLiked() {
  read URI_TYPE URI_ID <<<$(echo "$URI" | awk -F ":" '{print $2,$3}')
  ItIsLiked=$(
    curl -s -G  "https://api.spotify.com/v1/me/${URI_TYPE}s/contains?ids=${URI_ID}" \
      -H "Accept: application/json" \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer ${SPOTIFY_USER_ACCESS_TOKEN}" \
      )
}

getURIplaylist() {
  URI_INFO=$( \
    curl -s -G  "https://api.spotify.com/v1/${URI_TYPE}s/${URI_ID}/tracks?limit=${1}&offset=${2}"\
    -H "Accept: application/json" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer ${SPOTIFY_ACCESS_TOKEN} "

    )
}

showURIinfo() {
  read URI_TYPE URI_ID <<<$(echo "$URI" | awk -F ":" '{print $2,$3}')
  if [[ $URI_TYPE == "playlist" ]];then
    getAccessToken
    getURIplaylist 100 0

    total_tracks=$(echo $URI_INFO | $JQ -r '.total')

    if [[ $total_tracks -gt 100 ]];then
      for (( OFFSET=100; OFFSET<=${total_tracks}; OFFSET+=100 )); do
        URI_INFOorg=$(echo "$URI_INFO")
        getURIplaylist 100 ${OFFSET}
        URI_INFO=$(echo "$URI_INFOorg";echo "$URI_INFO")
      done
    fi
  else
    getUserAccessToken
    URI_INFO=$( \
      curl -s -G  "https://api.spotify.com/v1/${URI_TYPE}s/${URI_ID}" \
      -H "Accept: application/json" \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer ${SPOTIFY_USER_ACCESS_TOKEN}" \
      )
  fi

#echo "$URI_INFO" > json.out

#  format=csv
  if [[ $URI_TYPE == "playlist" ]];then
    URI_INFO=$(echo "$URI_INFO" | $JQ -r --arg format "$format" '.items[] | [ .track.uri, .track.name, .track.artists[0].name, .track.album.name] | @'$format'' )
  elif [[ $URI_TYPE == "album" ]];then
    URI_ALBUM_INFO=$(echo "$URI_INFO" | $JQ -r --arg format "$format" '[.uri, .artists[0].name, .name, .release_date] | @'$format'' )
    URI_TRACK_INFO=$(echo "$URI_INFO" | $JQ -r --arg format "$format" '.tracks.items[] | [ .uri, .disc_number, .track_number, .name ] | @'$format'' )
    URI_INFO=$(echo "Album:"; echo "$URI_ALBUM_INFO"; echo "Tracks:"; echo "$URI_TRACK_INFO")
  elif [[ $URI_TYPE == "track" ]];then
    URI_INFO=$(echo "$URI_INFO" | $JQ -r --arg format "$format" '[.uri, .name, .artists[0].name, .album.name] | @'$format'' )
  else
    URI_INFO=$(echo "$URI_INFO" | $JQ -r --arg format "$format" '[.uri, .name, .artists[0].name, .release_date] | @'$format'' )
  fi

  cecho "${URI_INFO}"
}

likeURI() {

  read URI_TYPE URI_ID <<<$(echo "$URI" | awk -F ":" '{print $2,$3}')
  if [[ $URI_TYPE ==  "track" || $URI_TYPE == "album" ]];then
    checkLiked
    if [[ $ItIsLiked == "[ true ]" ]];then
      cecho "oops, you already like `showURIinfo`"
    else
      curl -X "PUT" "https://api.spotify.com/v1/me/${URI_TYPE}s?ids=${URI_ID}" \
       -H "Accept: application/json" \
       -H "Content-Type: application/json" \
       -H "Authorization: Bearer ${SPOTIFY_USER_ACCESS_TOKEN}"
      showURIinfo
    fi
  else
   cecho "oops, you try to like a ${URI_TYPE}, but that's not possible for now."
  fi
}

queueTrack() {
  curl -X "POST" "https://api.spotify.com/v1/me/player/queue?uri=${URI}" \
   -H "Accept: application/json" \
   -H "Content-Type: application/json" \
   -H "Authorization: Bearer ${SPOTIFY_USER_ACCESS_TOKEN}" && \
   cecho "`showURIinfo`"
}


selectDevice() {
  curl -X "PUT" "https://api.spotify.com/v1/me/player" \
   --data "{\"device_ids\":[\"${device_id}\"]}" \
   -H "Accept: application/json" \
   -H "Content-Type: application/json" \
   -H "Authorization: Bearer ${SPOTIFY_USER_ACCESS_TOKEN}"

   sleep 2
   osascript -e 'tell application "Spotify" to play';
}

showStatus () {
    state=`osascript -e 'tell application "Spotify" to player state as string'`;
    cecho "Spotify is currently $state.";
    duration=`osascript -e 'tell application "Spotify"
            set durSec to (duration of current track / 1000) as text
            set tM to (round (durSec / 60) rounding down) as text
            if length of ((durSec mod 60 div 1) as text) is greater than 1 then
                set tS to (durSec mod 60 div 1) as text
            else
                set tS to ("0" & (durSec mod 60 div 1)) as text
            end if
            set myTime to tM as text & ":" & tS as text
            end tell
            return myTime'`;
    position=`osascript -e 'tell application "Spotify"
            set pos to player position
            set nM to (round (pos / 60) rounding down) as text
            if length of ((round (pos mod 60) rounding down) as text) is greater than 1 then
                set nS to (round (pos mod 60) rounding down) as text
            else
                set nS to ("0" & (round (pos mod 60) rounding down)) as text
            end if
            set nowAt to nM as text & ":" & nS as text
            end tell
            return nowAt'`;

    echo -e $reset"Artist: $(showArtist)\nAlbum: $(showAlbum)\nTrack: $(showTrack) \nPosition: $position / $duration";
}

getUserAccessToken() {
  ## Based on a gist by Hugh Rawlinson (https://gist.github.com/hughrawlinson/358afa57a04c8c0f1ce4f1fd86604a73)
  port=8082
  redirect_uri=http%3A%2F%2Flocalhost%3A$port%2F
  auth_endpoint=https://accounts.spotify.com/authorize/?response_type=code\&client_id=$CLIENT_ID\&redirect_uri=$redirect_uri
  # TODO return cached access token if scopes match and it hasn't expired
  # TODO get scopes from args
  scopes="playlist-read-private user-read-playback-state user-modify-playback-state user-read-recently-played user-library-read user-library-modify user-top-read"
  if [[ ! -z $scopes ]]
  then
    encoded_scopes=$(echo $scopes| tr ' ' '%' | sed s/%/%20/g)
    # If scopes exists, then append them to auth_endpoint
    auth_endpoint=$auth_endpoint\&scope=$encoded_scopes
  fi

  # If refresh_token exists and is valid for scopes, use refresh flow. No new login required
  if [[ -r "/var/tmp/shpotify_refresh_token" ]];then
    refresh_token=$(cat "/var/tmp/shpotify_refresh_token");
    response=$(curl -s https://accounts.spotify.com/api/token \
      -H "Content-Type:application/x-www-form-urlencoded" \
      -H "Authorization: Basic $(echo -n $CLIENT_ID:$CLIENT_SECRET | base64)" \
      -d "grant_type=refresh_token" \
      -d "refresh_token=$refresh_token" \
      )
  else
    open $auth_endpoint
    # User is now authenticating on accounts.spotify.com...

    # Now the user gets redirected to our endpoint
    # Grab token and close browser window
    ### DM: closinig of window/tab doesn't work that well...
    response=$(echo "HTTP/1.1 200 OK\nAccess-Control-Allow-Origin:*\nContent-Length:65\n\n<html><script>open(location, '_self').close();</script></html>\n" | nc -l -c $port)
    code=$(echo "$response" | grep GET | cut -d' ' -f 2 | cut -d'=' -f 2)

    response=$(curl -s https://accounts.spotify.com/api/token \
      -H "Content-Type:application/x-www-form-urlencoded" \
      -H "Authorization: Basic ${SHPOTIFY_CREDENTIALS}" \
      -d "grant_type=authorization_code&code=$code&redirect_uri=http%3A%2F%2Flocalhost%3A$port%2F")

    ## refresh token only given during original authentication.
    # Store the refrehs_token for later use
    echo $response | $JQ -r '.refresh_token' > /var/tmp/shpotify_refresh_token
  fi

  # Output cache access token
  SPOTIFY_USER_ACCESS_TOKEN=$(echo $response | $JQ -r '.access_token')
}

getAccessToken() {
    cecho "Connecting to Spotify's API";
    SPOTIFY_TOKEN_URI="https://accounts.spotify.com/api/token";
    SPOTIFY_TOKEN_RESPONSE_DATA=$( \
        curl "${SPOTIFY_TOKEN_URI}" \
            --silent \
            -X "POST" \
            -H "Authorization: Basic ${SHPOTIFY_CREDENTIALS}" \
            -d "grant_type=client_credentials" \
    )
    if ! [[ "${SPOTIFY_TOKEN_RESPONSE_DATA}" =~ "access_token" ]]; then
        cecho "Autorization failed, please check ${USER_CONFG_FILE}"
        cecho "${SPOTIFY_TOKEN_RESPONSE_DATA}"
        showAPIHelp
        exit 1
    fi
    SPOTIFY_ACCESS_TOKEN=$( \
        printf "${SPOTIFY_TOKEN_RESPONSE_DATA}" \
        | command grep -E -o '"access_token":".*",' \
        | sed 's/"access_token"://g' \
        | sed 's/"//g' \
        | sed 's/,.*//g' \
    )
}

## Check existence of jq
if [ -x "$(command -v jq)" ]; then
  # JQ in path, set JQ:
  JQ=$(command -v jq)
  jq_installed="true"
elif [ -x "$(find /bin /usr/local/bin -name jq 2> /dev/null)" ]; then
  # in case /usr/local/bin is not in $PATH
  JQ=$(find /usr/local/bin -name jq 2> /dev/null)
  jq_installed="true"
else
  # no JQ found
  jq_installed="false"
fi

if [ $# = 0 ]; then
    showHelp;
else
	if [ ! -d /Applications/Spotify.app ] && [ ! -d $HOME/Applications/Spotify.app ]; then
		echo "The Spotify application must be installed."
		exit 1
	fi

    if [ $(osascript -e 'application "Spotify" is running') = "false" ]; then
        osascript -e 'tell application "Spotify" to activate' || exit 1
        sleep 2
    fi
fi

while [ $# -gt 0 ]; do
    arg=$1;

    case $arg in
        "play"    )
            if [ $# != 1 ]; then
                # There are additional arguments, so find out how many
                array=( $@ );
                len=${#array[@]};
                SPOTIFY_SEARCH_API="https://api.spotify.com/v1/search";
                SPOTIFY_TOKEN_URI="https://accounts.spotify.com/api/token";
                if [ -z "${CLIENT_ID}" ]; then
                    cecho "Invalid Client ID, please update ${USER_CONFIG_FILE}";
                    showAPIHelp;
                    exit 1;
                fi
                if [ -z "${CLIENT_SECRET}" ]; then
                    cecho "Invalid Client Secret, please update ${USER_CONFIG_FILE}";
                    showAPIHelp;
                    exit 1;
                fi
                SHPOTIFY_CREDENTIALS=$(printf "${CLIENT_ID}:${CLIENT_SECRET}" | base64 | tr -d "\n"|tr -d '\r');
                SPOTIFY_PLAY_URI="";

                searchAndPlay() {
                    type="$1"
                    Q="$2"

                    getAccessToken;

                    cecho "Searching ${type}s for: $Q";

                    SPOTIFY_PLAY_URI=$( \
                        curl -s -G $SPOTIFY_SEARCH_API \
                            -H "Authorization: Bearer ${SPOTIFY_ACCESS_TOKEN}" \
                            -H "Accept: application/json" \
                            --data-urlencode "q=$Q" \
                            -d "type=$type&limit=1&offset=0" \
                        | command grep -E -o "spotify:$type:[a-zA-Z0-9]+" -m 1
                    )
                    echo "play uri: ${SPOTIFY_PLAY_URI}"
                }

                case $2 in
                    "list"  )
                        _args=${array[@]:2:$len};
                        Q=$_args;

                        getAccessToken;

                        cecho "Searching playlists for: $Q";

                        results=$( \
                            curl -s -G $SPOTIFY_SEARCH_API --data-urlencode "q=$Q" -d "type=playlist&limit=10&offset=0" -H "Accept: application/json" -H "Authorization: Bearer ${SPOTIFY_ACCESS_TOKEN}" \
                            | command grep -E -o "spotify:playlist:[a-zA-Z0-9]+" -m 10 \
                        )

                        count=$( \
                            echo "$results" | command grep -c "spotify:playlist" \
                        )

                        if [ "$count" -gt 0 ]; then
                            random=$(( $RANDOM % $count));

                            SPOTIFY_PLAY_URI=$( \
                                echo "$results" | awk -v random="$random" '/spotify:playlist:[a-zA-Z0-9]+/{i++}i==random{print; exit}' \
                            )
                        fi;;

                    "album" | "artist" | "track"    )
                        _args=${array[@]:2:$len};
                        searchAndPlay $2 "$_args";;

                    "uri"  )
                        SPOTIFY_PLAY_URI=${array[@]:2:$len};;

                    *   )
                        _args=${array[@]:1:$len};
                        searchAndPlay track "$_args";;
                esac

                if [ "$SPOTIFY_PLAY_URI" != "" ]; then
                    if [ "$2" = "uri" ]; then
                        cecho "Playing Spotify URI: $SPOTIFY_PLAY_URI";
                    else
                        cecho "Playing ($Q Search) -> Spotify URI: $SPOTIFY_PLAY_URI";
                    fi

                    osascript -e "tell application \"Spotify\" to play track \"$SPOTIFY_PLAY_URI\"";

                else
                    cecho "No results when searching for $Q";
                fi

            else

                # play is the only param
                cecho "Playing Spotify.";
                osascript -e 'tell application "Spotify" to play';
            fi
            break ;;

        "pause"    )
            state=`osascript -e 'tell application "Spotify" to player state as string'`;
            if [ $state = "playing" ]; then
              cecho "Pausing Spotify.";
            else
              cecho "Playing Spotify.";
            fi

            osascript -e 'tell application "Spotify" to playpause';
            break ;;

        "stop"    )
            state=`osascript -e 'tell application "Spotify" to player state as string'`;
            if [ $state = "playing" ]; then
              cecho "Pausing Spotify.";
              osascript -e 'tell application "Spotify" to playpause';
            else
              cecho "Spotify is already stopped."
            fi

            break ;;

        "quit"    ) cecho "Quitting Spotify.";
            osascript -e 'tell application "Spotify" to quit';
            exit 0 ;;

        "next"    ) cecho "Going to next track." ;
            osascript -e 'tell application "Spotify" to next track';
            showStatus;
            break ;;

        "prev"    ) cecho "Going to previous track.";
            osascript -e '
            tell application "Spotify"
                set player position to 0
                previous track
            end tell';
            showStatus;
            break ;;

        "replay"  ) cecho "Replaying current track.";
            osascript -e 'tell application "Spotify" to set player position to 0'
            break ;;

        "vol"    )
            vol=`osascript -e 'tell application "Spotify" to sound volume as integer'`;
            if [[ $2 = "" || $2 = "show" ]]; then
                cecho "Current Spotify volume level is $vol.";
                break ;
            elif [ "$2" = "up" ]; then
              if [ $vol -le $(( 100-$VOL_INCREMENT )) ]; then
                    newvol=$(( vol+$VOL_INCREMENT ));
                    cecho "Increasing Spotify volume to $newvol.";
                else
                    newvol=100;
                    cecho "Spotify volume level is at max.";
                fi
            elif [ "$2" = "down" ]; then
                if [ $vol -ge $(( $VOL_INCREMENT )) ]; then
                    newvol=$(( vol-$VOL_INCREMENT ));
                    cecho "Reducing Spotify volume to $newvol.";
                else
                    newvol=0;
                    cecho "Spotify volume level is at min.";
                fi
            elif [[ $2 =~ ^[0-9]+$ ]] && [[ $2 -ge 0 && $2 -le 100 ]]; then
                newvol=$2;
                cecho "Setting Spotify volume level to $newvol";
            else
                echo "Improper use of 'vol' command"
                echo "The 'vol' command should be used as follows:"
                echo "  vol up                       # Increases the volume by $VOL_INCREMENT%.";
                echo "  vol down                     # Decreases the volume by $VOL_INCREMENT%.";
                echo "  vol [amount]                 # Sets the volume to an amount between 0 and 100.";
                echo "  vol                          # Shows the current Spotify volume.";
                exit 1;
            fi

            osascript -e "tell application \"Spotify\" to set sound volume to $newvol";
            break ;;

        "toggle"  )
            if [ "$2" = "shuffle" ]; then
                osascript -e 'tell application "Spotify" to set shuffling to not shuffling';
                curr=`osascript -e 'tell application "Spotify" to shuffling'`;
                cecho "Spotify shuffling set to $curr";
            elif [ "$2" = "repeat" ]; then
                osascript -e 'tell application "Spotify" to set repeating to not repeating';
                curr=`osascript -e 'tell application "Spotify" to repeating'`;
                cecho "Spotify repeating set to $curr";
            fi
            break ;;

        "status" )
            if [ $# != 1 ]; then
                # There are additional arguments, a status subcommand
                case $2 in
                    "artist" )
                        showArtist;
                        break ;;

                    "album" )
                        showAlbum;
                        break ;;

                    "track" )
                        showTrack;
                        break ;;

                    "liked" )
                        array=( $@ );
                        len=${#array[@]};
                        URIs=${array[@]:2:$len};
                        format="tsv";
                        getUserAccessToken;
                        for URI in $URIs;
                        do
                          checkLiked;
                          if [[ $ItIsLiked == "[ true ]" ]];then
                            cecho "You like: `showURIinfo`"
                          else
                            cecho "You don't like (yet): `showURIinfo`"
                          fi
                        done
                        break ;;

                esac
            else
                # status is the only param
                showStatus;
            fi
            break ;;
        "list" )
            if [[ $jq_installed == "false" ]];then
              echo "Unfortunately the 'list' option will not function without 'jq', a json parser. It can be installed with \"brew install jq\""
            else
              if [ $# != 1 ]; then
                  # There are additional arguments, a status subcommand
                  if [[ "$3" == "csv" || "$3" == "tsv" || "$3" == "text" || "$3" == "html" ]]; then
                    format=$3
                  else
                    format="tsv"
                  fi
                  case $2 in
                      "uri" )
                          array=( $@ );
                          len=${#array[@]};
                          URI=${array[@]:2:$len};
                          showURIinfo;
                          break ;;

                      "history" | "recently-played" )
                          getUserAccessToken;
                          #showMyHistory;
                          myfilter="player/recently-played";
                          showMine;
                          break ;;

                      "mysongs" | "songs" | "tracks" )
                          getUserAccessToken;
                          myfilter="tracks"
                          showMine;
                          break ;;

                      "myalbums" | "albums" )
                          getUserAccessToken;
                          myfilter="albums"
                          showMine;
                          break ;;

                      "mine" | "playlists" | "lists" )
                          getUserAccessToken;
                          #showMyPlaylists;
                          myfilter="playlists";
                          showMine;
                          break ;;

                      "devices" )
                          getUserAccessToken;
                          showMyDevices;
                          break ;;
                  esac
              fi
            fi
            break ;;

        "like" )
            array=( $@ );
            len=${#array[@]};
            URIs=${array[@]:1:$len};
            format="tsv"
            getUserAccessToken;
            cecho "You like: "
            for URI in $URIs
            do
              likeURI;
              sleep 1
            done
            break ;;

        "connect" )
            if [[ $jq_installed == "false" ]];then
              echo "Unfortunately the 'connect' option will not function without 'jq', a json parser. It can be installed with \"brew install jq\""
            else
              if [ $# != 1 ]; then
                  # There are additional arguments, a status subcommand
                  device_id=$2
                  getUserAccessToken;
                  selectDevice;
              fi
            fi
            break ;;

        "queue" | "q" )
            array=( $@ );
            len=${#array[@]};
            URIs=${array[@]:1:$len};
            format="tsv"
            getUserAccessToken;
            cecho "You queued: "
            for URI in $URIs
            do
              queueTrack;
              sleep 1
            done
            break ;;

        "info" )
            info=`osascript -e 'tell application "Spotify"
                set durSec to (duration of current track / 1000)
                set tM to (round (durSec / 60) rounding down) as text
                if length of ((durSec mod 60 div 1) as text) is greater than 1 then
                    set tS to (durSec mod 60 div 1) as text
                else
                    set tS to ("0" & (durSec mod 60 div 1)) as text
                end if
                set myTime to tM as text & "min " & tS as text & "s"
                set pos to player position
                set nM to (round (pos / 60) rounding down) as text
                if length of ((round (pos mod 60) rounding down) as text) is greater than 1 then
                    set nS to (round (pos mod 60) rounding down) as text
                else
                    set nS to ("0" & (round (pos mod 60) rounding down)) as text
                end if
                set nowAt to nM as text & "min " & nS as text & "s"
                set info to "" & "\nArtist:         " & artist of current track
                set info to info & "\nTrack:          " & name of current track
                set info to info & "\nAlbum Artist:   " & album artist of current track
                set info to info & "\nAlbum:          " & album of current track
                set info to info & "\nSeconds:        " & durSec
                set info to info & "\nSeconds played: " & pos
                set info to info & "\nDuration:       " & mytime
                set info to info & "\nNow at:         " & nowAt
                set info to info & "\nPlayed Count:   " & played count of current track
                set info to info & "\nTrack Number:   " & track number of current track
                set info to info & "\nPopularity:     " & popularity of current track
                set info to info & "\nId:             " & id of current track
                set info to info & "\nSpotify URL:    " & spotify url of current track
                set info to info & "\nArtwork:        " & artwork url of current track
                set info to info & "\nPlayer:         " & player state
                set info to info & "\nVolume:         " & sound volume
                set info to info & "\nShuffle:        " & shuffling
                set info to info & "\nRepeating:      " & repeating
            end tell
            return info'`
            cecho "$info";
            break ;;

        "share"     )
            uri=`osascript -e 'tell application "Spotify" to spotify url of current track'`;
            remove='spotify:track:'
            url=${uri#$remove}
            url="https://open.spotify.com/track/$url"

            if [ "$2" = "" ]; then
                cecho "Spotify URL: $url"
                cecho "Spotify URI: $uri"
                echo "To copy the URL or URI to your clipboard, use:"
                echo "\`spotify share url\` or"
                echo "\`spotify share uri\` respectively."
            elif [ "$2" = "url" ]; then
                cecho "Spotify URL: $url";
                echo -n $url | pbcopy
            elif [ "$2" = "uri" ]; then
                cecho "Spotify URI: $uri";
                echo -n $uri | pbcopy
            fi
            break ;;

        "pos"   )
            cecho "Adjusting Spotify play position."
            osascript -e "tell application \"Spotify\" to set player position to $2";
            break ;;

        "help" )
            showHelp;
            break ;;

        "-v" | "--version" )
            showVersion | column -t;
            break ;;

        * )
            showHelp;
            exit 1;

    esac
done
